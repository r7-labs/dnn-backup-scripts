#!/bin/sh

cd $(dirname $0)
. ./backup-functions

# params
TARGET=$1
GET_BASEURL=$2
BACKUP_DIR=$3
BACKUP_EXT=$4
MAX_BACKUPS=$5

LIMIT_RATE=10m
GET_CMD="curl --limit-rate $LIMIT_RATE"
TODAY=$(date +%y%m%d)
TARGET_FILE=$TARGET-$TODAY.$BACKUP_EXT
LOG="download-backup.log"

ORIGINAL_DIR=$PWD
cd $BACKUP_DIR

log_message "Backup download started" "Target: $TARGET" $LOG

$GET_CMD -o "$TARGET_FILE" "$GET_BASEURL/$TARGET_FILE"

if [ $? -ne 0 ]; then
	log_error "Backup download error" "Cannot download $TARGET backup file!" $LOG
	exit 1
fi

$GET_CMD -o "$TARGET_FILE.md5" "$GET_BASEURL/$TARGET_FILE.md5"

if [ $? -ne 0 ]; then
	log_error "Backup download error" "Cannot download $TARGET backup file checksum!" $LOG
	exit 1
fi

#Â HACK: Need less hacky check for fciv-generated MD5
if [ "$BACKUP_EXT" = "7z" ]; then
	# check MD5
	dos2unix "$TARGET_FILE.md5"
	# grep removes fciv comments, sed add two spaces after hash
	CHECKSUM_RESULT=$(cat "$TARGET_FILE.md5" | grep -v // |  sed -e "s/ \+/  /g" | md5sum -c)
else
	CHECKSUM_RESULT=$(cat "$TARGET_FILE.md5" | md5sum -c)
fi

if [ $? -ne 0 ]; then
	log_error "Backup checksum error" "$CHECKSUM_RESULT" $LOG
	rm -f "$TARGET_FILE"
	rm -f "$TARGET_FILE.md5"
	exit 1
else
	log_message "Backup checksum verified" "$CHECKSUM_RESULT" $LOG
fi

remove_old_backups $TARGET $BACKUP_EXT $MAX_BACKUPS

cd $ORIGINAL_DIR
